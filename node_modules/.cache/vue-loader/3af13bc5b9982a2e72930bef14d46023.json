{"remainingRequest":"/home/goshva/vue/site-telega-chat/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/goshva/vue/site-telega-chat/src/components/Chat.vue?vue&type=style&index=0&id=2bc3d388&scoped=true&lang=css&","dependencies":[{"path":"/home/goshva/vue/site-telega-chat/src/components/Chat.vue","mtime":1606161414705},{"path":"/home/goshva/vue/site-telega-chat/node_modules/css-loader/dist/cjs.js","mtime":1593341291998},{"path":"/home/goshva/vue/site-telega-chat/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1606029583914},{"path":"/home/goshva/vue/site-telega-chat/node_modules/postcss-loader/src/index.js","mtime":1588314378971},{"path":"/home/goshva/vue/site-telega-chat/node_modules/cache-loader/dist/cjs.js","mtime":1588314378619},{"path":"/home/goshva/vue/site-telega-chat/node_modules/vue-loader/lib/index.js","mtime":1606029583914}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCmgzIHsKICBtYXJnaW46IDQwcHggMCAwOwp9CnVsIHsKICBsaXN0LXN0eWxlLXR5cGU6IG5vbmU7CiAgcGFkZGluZzogMDsKfQpsaSB7CiAgZGlzcGxheTogaW5saW5lLWJsb2NrOwogIG1hcmdpbjogMCAxMHB4Owp9CmEgewogIGNvbG9yOiAjNDJiOTgzOwp9Cg=="},{"version":3,"sources":["Chat.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4KA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Chat.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n    <beautiful-chat\n      :participants=\"participants\"\n      :titleImageUrl=\"titleImageUrl\"\n      :onMessageWasSent=\"onMessageWasSent\"\n      :messageList=\"messageList\"\n      :newMessagesCount=\"newMessagesCount\"\n      :isOpen=\"isChatOpen\"\n      :close=\"closeChat\"\n      :open=\"openChat\"\n      :showEmoji=\"true\"\n      :showFile=\"true\"\n      :showEdition=\"true\"\n      :showDeletion=\"true\"\n      :deletionConfirmation=\"true\"\n      :showTypingIndicator=\"showTypingIndicator\"\n      :showLauncher=\"true\"\n      :showCloseButton=\"true\"\n      :colors=\"colors\"\n      :alwaysScrollToBottom=\"alwaysScrollToBottom\"\n      :disableUserListToggle=\"false\"\n      :messageStyling=\"messageStyling\"\n      @onType=\"handleOnType\"\n      @edit=\"editMessage\" />\n      \n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'Chat',\n  data() {\n    return {\n      name: '',\n      identity: 0,\n      participants: [\n        {\n          id: 'user1',\n          name: 'Егор',\n          imageUrl: 'https://quest0.ru/images/index-3-3-390x332.jpg'\n        },\n        {\n          id: 'user2',\n          name: 'Support',\n          imageUrl: 'https://avatars3.githubusercontent.com/u/37018832?s=200&v=4'\n        }\n      ], // the list of all the participant of the conversation. `name` is the user name, `id` is used to establish the author of a message, `imageUrl` is supposed to be the user avatar.\n      titleImageUrl: 'https://a.slack-edge.com/66f9/img/avatars-teams/ava_0001-34.png',\n      messageList: [\n          { type: 'text', author: `user1`, data: { text: `Добро пожаловать. Чем мы можем помочь?` } }\n      ], // the list of the messages to show, can be paginated and adjusted dynamically\n      newMessagesCount: 0,\n      isChatOpen: false, // to determine whether the chat window should be open or closed\n      showTypingIndicator: '', // when set to a value matching the participant.id it shows the typing indicator for the specific user\n      colors: {\n        header: {\n          bg: '#4e8cff',\n          text: '#ffffff'\n        },\n        launcher: {\n          bg: '#4e8cff'\n        },\n        messageList: {\n          bg: '#ffffff'\n        },\n        sentMessage: {\n          bg: '#4e8cff',\n          text: '#ffffff'\n        },\n        receivedMessage: {\n          bg: '#eaeaea',\n          text: '#222222'\n        },\n        userInput: {\n          bg: '#f4f7f9',\n          text: '#565867'\n        }\n      }, // specifies the color scheme for the component\n      alwaysScrollToBottom: false, // when set to true always scrolls the chat to the bottom when new events are in (new message, user starts typing...)\n      messageStyling: true // enables *bold* /emph/ _underline_ and such (more info at github.com/mattezza/msgdown)\n    }\n  },\n  methods: {\n    sendMessage (text) {\n\n      if (text.length > 0) {\n        this.newMessagesCount = this.isChatOpen ? this.newMessagesCount : this.newMessagesCount + 1\n        \n        this.onMessageWasSent({ author: 'support', type: 'text', data: { text } })\n      }\n              // $socket is [WebSocket](https://developer.mozilla.org/en-US/docs/Web/API/WebSocket) instance\n        // or with {format: 'json'} enabled\n\n        //this.$socket.sendObj(json)\n    },\n    onMessageWasSent (message) {\n      // called when the user sends a message\n      let json = ['feedback_messages', {\n          identity: this.identity,\n          text: message.data.text,\n          person: 'web-Клиент'\n      }]\n      this.$socket.send(JSON.stringify(json))\n      this.messageList = [ ...this.messageList, message ]\n    },\n    openChat () {\n      // called when the user clicks on the fab button to open the chat\n      this.isChatOpen = true\n      this.newMessagesCount = 0\n    },\n    closeChat () {\n      // called when the user clicks on the botton to close the chat\n      this.isChatOpen = false\n    },\n    handleScrollToTop () {\n      // called when the user scrolls message list to top\n      // leverage pagination for loading another page of messages\n    },\n    handleOnType () {\n      console.log('Emit typing event')\n    },\n    editMessage(message){\n      const m = this.messageList.find(m=>m.id === message.id);\n      m.isEdited = true;\n      m.data.text = message.data.text;\n    },\n    soundPlay(){\n      var audio = new Audio('in.mp3');\n      audio.play();\n    },\n    idgen(length){\n      var result           = '';\n      var characters       = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n      var charactersLength = characters.length;\n      for ( var i = 0; i < length; i++ ) {\n        result += characters.charAt(Math.floor(Math.random() * charactersLength));\n      }\n      return result;\n    }\n  },\n  mounted() {\n    if (localStorage.name) {\n      this.name = localStorage.name;\n    }\n    if (localStorage.identity) {\n      this.identity = localStorage.identity;\n    }\n    else {\n      localStorage.identity =  this.idgen(Math.random()*48+16);\n      this.identity = localStorage.identity;\n\n    }\n    this.$options.sockets.onmessage = (event) =>  { \n           console.log(event)\n      const data = JSON.parse(event.data)\n      const line = data[1].text;\n//    let servdata =  data.data[1]; \n//    console.log(servdata)\n      console.log(line)\n      if (data[1].direction == \"reply\"){\n        this.soundPlay(); \n        this.messageList = [ ...this.messageList,  { type: 'text', author: `supp`, data: { text :line}} ] }\n      }\n    // { type: 'text', author: `user1`, data: { text: `Добро пожаловать. Чем мы можем помочь?` } }\n    //    this.$options.sockets.onmessage = (data) => this.messageList.push(data)\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\nh3 {\n  margin: 40px 0 0;\n}\nul {\n  list-style-type: none;\n  padding: 0;\n}\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\na {\n  color: #42b983;\n}\n</style>\n\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n</style>\n\n"]}]}