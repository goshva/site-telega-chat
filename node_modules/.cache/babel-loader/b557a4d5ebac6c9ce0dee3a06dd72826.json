{"remainingRequest":"/home/goshva/vue/site-telega-chat/node_modules/thread-loader/dist/cjs.js!/home/goshva/vue/site-telega-chat/node_modules/babel-loader/lib/index.js!/home/goshva/vue/site-telega-chat/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/goshva/vue/site-telega-chat/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/goshva/vue/site-telega-chat/src/components/Chat.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/goshva/vue/site-telega-chat/src/components/Chat.vue","mtime":1606059205257},{"path":"/home/goshva/vue/site-telega-chat/node_modules/cache-loader/dist/cjs.js","mtime":1588314378619},{"path":"/home/goshva/vue/site-telega-chat/node_modules/thread-loader/dist/cjs.js","mtime":1588314379192},{"path":"/home/goshva/vue/site-telega-chat/node_modules/babel-loader/lib/index.js","mtime":1606029581549},{"path":"/home/goshva/vue/site-telega-chat/node_modules/cache-loader/dist/cjs.js","mtime":1588314378619},{"path":"/home/goshva/vue/site-telega-chat/node_modules/vue-loader/lib/index.js","mtime":1606029583914}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuY29uY2F0IjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmluZCI7CmltcG9ydCBfdG9Db25zdW1hYmxlQXJyYXkgZnJvbSAiL2hvbWUvZ29zaHZhL3Z1ZS9zaXRlLXRlbGVnYS1jaGF0L25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90b0NvbnN1bWFibGVBcnJheSI7Ci8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnQ2hhdCcsCiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIHBhcnRpY2lwYW50czogW3sKICAgICAgICBpZDogJ3VzZXIxJywKICAgICAgICBuYW1lOiAnTWF0dGVvJywKICAgICAgICBpbWFnZVVybDogJ2h0dHBzOi8vYXZhdGFyczMuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3UvMTkxNTk4OT9zPTIzMCZ2PTQnCiAgICAgIH0sIHsKICAgICAgICBpZDogJ3VzZXIyJywKICAgICAgICBuYW1lOiAnU3VwcG9ydCcsCiAgICAgICAgaW1hZ2VVcmw6ICdodHRwczovL2F2YXRhcnMzLmdpdGh1YnVzZXJjb250ZW50LmNvbS91LzM3MDE4ODMyP3M9MjAwJnY9NCcKICAgICAgfV0sCiAgICAgIC8vIHRoZSBsaXN0IG9mIGFsbCB0aGUgcGFydGljaXBhbnQgb2YgdGhlIGNvbnZlcnNhdGlvbi4gYG5hbWVgIGlzIHRoZSB1c2VyIG5hbWUsIGBpZGAgaXMgdXNlZCB0byBlc3RhYmxpc2ggdGhlIGF1dGhvciBvZiBhIG1lc3NhZ2UsIGBpbWFnZVVybGAgaXMgc3VwcG9zZWQgdG8gYmUgdGhlIHVzZXIgYXZhdGFyLgogICAgICB0aXRsZUltYWdlVXJsOiAnaHR0cHM6Ly9hLnNsYWNrLWVkZ2UuY29tLzY2ZjkvaW1nL2F2YXRhcnMtdGVhbXMvYXZhXzAwMDEtMzQucG5nJywKICAgICAgbWVzc2FnZUxpc3Q6IFt7CiAgICAgICAgdHlwZTogJ3RleHQnLAogICAgICAgIGF1dGhvcjogInVzZXIxIiwKICAgICAgICBkYXRhOiB7CiAgICAgICAgICB0ZXh0OiAiXHUwNDE0XHUwNDNFXHUwNDMxXHUwNDQwXHUwNDNFIFx1MDQzRlx1MDQzRVx1MDQzNlx1MDQzMFx1MDQzQlx1MDQzRVx1MDQzMlx1MDQzMFx1MDQ0Mlx1MDQ0Qy4gXHUwNDI3XHUwNDM1XHUwNDNDIFx1MDQzQ1x1MDQ0QiBcdTA0M0NcdTA0M0VcdTA0MzZcdTA0MzVcdTA0M0MgXHUwNDNGXHUwNDNFXHUwNDNDXHUwNDNFXHUwNDQ3XHUwNDRDPyIKICAgICAgICB9CiAgICAgIH1dLAogICAgICAvLyB0aGUgbGlzdCBvZiB0aGUgbWVzc2FnZXMgdG8gc2hvdywgY2FuIGJlIHBhZ2luYXRlZCBhbmQgYWRqdXN0ZWQgZHluYW1pY2FsbHkKICAgICAgbmV3TWVzc2FnZXNDb3VudDogMCwKICAgICAgaXNDaGF0T3BlbjogZmFsc2UsCiAgICAgIC8vIHRvIGRldGVybWluZSB3aGV0aGVyIHRoZSBjaGF0IHdpbmRvdyBzaG91bGQgYmUgb3BlbiBvciBjbG9zZWQKICAgICAgc2hvd1R5cGluZ0luZGljYXRvcjogJycsCiAgICAgIC8vIHdoZW4gc2V0IHRvIGEgdmFsdWUgbWF0Y2hpbmcgdGhlIHBhcnRpY2lwYW50LmlkIGl0IHNob3dzIHRoZSB0eXBpbmcgaW5kaWNhdG9yIGZvciB0aGUgc3BlY2lmaWMgdXNlcgogICAgICBjb2xvcnM6IHsKICAgICAgICBoZWFkZXI6IHsKICAgICAgICAgIGJnOiAnIzRlOGNmZicsCiAgICAgICAgICB0ZXh0OiAnI2ZmZmZmZicKICAgICAgICB9LAogICAgICAgIGxhdW5jaGVyOiB7CiAgICAgICAgICBiZzogJyM0ZThjZmYnCiAgICAgICAgfSwKICAgICAgICBtZXNzYWdlTGlzdDogewogICAgICAgICAgYmc6ICcjZmZmZmZmJwogICAgICAgIH0sCiAgICAgICAgc2VudE1lc3NhZ2U6IHsKICAgICAgICAgIGJnOiAnIzRlOGNmZicsCiAgICAgICAgICB0ZXh0OiAnI2ZmZmZmZicKICAgICAgICB9LAogICAgICAgIHJlY2VpdmVkTWVzc2FnZTogewogICAgICAgICAgYmc6ICcjZWFlYWVhJywKICAgICAgICAgIHRleHQ6ICcjMjIyMjIyJwogICAgICAgIH0sCiAgICAgICAgdXNlcklucHV0OiB7CiAgICAgICAgICBiZzogJyNmNGY3ZjknLAogICAgICAgICAgdGV4dDogJyM1NjU4NjcnCiAgICAgICAgfQogICAgICB9LAogICAgICAvLyBzcGVjaWZpZXMgdGhlIGNvbG9yIHNjaGVtZSBmb3IgdGhlIGNvbXBvbmVudAogICAgICBhbHdheXNTY3JvbGxUb0JvdHRvbTogZmFsc2UsCiAgICAgIC8vIHdoZW4gc2V0IHRvIHRydWUgYWx3YXlzIHNjcm9sbHMgdGhlIGNoYXQgdG8gdGhlIGJvdHRvbSB3aGVuIG5ldyBldmVudHMgYXJlIGluIChuZXcgbWVzc2FnZSwgdXNlciBzdGFydHMgdHlwaW5nLi4uKQogICAgICBtZXNzYWdlU3R5bGluZzogdHJ1ZSAvLyBlbmFibGVzICpib2xkKiAvZW1waC8gX3VuZGVybGluZV8gYW5kIHN1Y2ggKG1vcmUgaW5mbyBhdCBnaXRodWIuY29tL21hdHRlenphL21zZ2Rvd24pCgogICAgfTsKICB9LAogIG1ldGhvZHM6IHsKICAgIHNlbmRNZXNzYWdlOiBmdW5jdGlvbiBzZW5kTWVzc2FnZSh0ZXh0KSB7CiAgICAgIGlmICh0ZXh0Lmxlbmd0aCA+IDApIHsKICAgICAgICB0aGlzLm5ld01lc3NhZ2VzQ291bnQgPSB0aGlzLmlzQ2hhdE9wZW4gPyB0aGlzLm5ld01lc3NhZ2VzQ291bnQgOiB0aGlzLm5ld01lc3NhZ2VzQ291bnQgKyAxOwogICAgICAgIHRoaXMub25NZXNzYWdlV2FzU2VudCh7CiAgICAgICAgICBhdXRob3I6ICdzdXBwb3J0JywKICAgICAgICAgIHR5cGU6ICd0ZXh0JywKICAgICAgICAgIGRhdGE6IHsKICAgICAgICAgICAgdGV4dDogdGV4dAogICAgICAgICAgfQogICAgICAgIH0pOwogICAgICB9IC8vICRzb2NrZXQgaXMgW1dlYlNvY2tldF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1dlYlNvY2tldCkgaW5zdGFuY2UKICAgICAgLy8gb3Igd2l0aCB7Zm9ybWF0OiAnanNvbid9IGVuYWJsZWQKICAgICAgLy90aGlzLiRzb2NrZXQuc2VuZE9iaihqc29uKQoKICAgIH0sCiAgICBvbk1lc3NhZ2VXYXNTZW50OiBmdW5jdGlvbiBvbk1lc3NhZ2VXYXNTZW50KG1lc3NhZ2UpIHsKICAgICAgLy8gY2FsbGVkIHdoZW4gdGhlIHVzZXIgc2VuZHMgYSBtZXNzYWdlCiAgICAgIHZhciBqc29uID0gWydmZWVkYmFja19tZXNzYWdlcycsIHsKICAgICAgICB0ZXh0OiBtZXNzYWdlLmRhdGEudGV4dCwKICAgICAgICBwZXJzb246ICd3ZWIt0JrQu9C40LXQvdGCJwogICAgICB9XTsKICAgICAgdGhpcy4kc29ja2V0LnNlbmQoSlNPTi5zdHJpbmdpZnkoanNvbikpOwogICAgICB0aGlzLm1lc3NhZ2VMaXN0ID0gW10uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheSh0aGlzLm1lc3NhZ2VMaXN0KSwgW21lc3NhZ2VdKTsKICAgIH0sCiAgICBvcGVuQ2hhdDogZnVuY3Rpb24gb3BlbkNoYXQoKSB7CiAgICAgIC8vIGNhbGxlZCB3aGVuIHRoZSB1c2VyIGNsaWNrcyBvbiB0aGUgZmFiIGJ1dHRvbiB0byBvcGVuIHRoZSBjaGF0CiAgICAgIHRoaXMuaXNDaGF0T3BlbiA9IHRydWU7CiAgICAgIHRoaXMubmV3TWVzc2FnZXNDb3VudCA9IDA7CiAgICB9LAogICAgY2xvc2VDaGF0OiBmdW5jdGlvbiBjbG9zZUNoYXQoKSB7CiAgICAgIC8vIGNhbGxlZCB3aGVuIHRoZSB1c2VyIGNsaWNrcyBvbiB0aGUgYm90dG9uIHRvIGNsb3NlIHRoZSBjaGF0CiAgICAgIHRoaXMuaXNDaGF0T3BlbiA9IGZhbHNlOwogICAgfSwKICAgIGhhbmRsZVNjcm9sbFRvVG9wOiBmdW5jdGlvbiBoYW5kbGVTY3JvbGxUb1RvcCgpIHsvLyBjYWxsZWQgd2hlbiB0aGUgdXNlciBzY3JvbGxzIG1lc3NhZ2UgbGlzdCB0byB0b3AKICAgICAgLy8gbGV2ZXJhZ2UgcGFnaW5hdGlvbiBmb3IgbG9hZGluZyBhbm90aGVyIHBhZ2Ugb2YgbWVzc2FnZXMKICAgIH0sCiAgICBoYW5kbGVPblR5cGU6IGZ1bmN0aW9uIGhhbmRsZU9uVHlwZSgpIHsKICAgICAgY29uc29sZS5sb2coJ0VtaXQgdHlwaW5nIGV2ZW50Jyk7CiAgICB9LAogICAgZWRpdE1lc3NhZ2U6IGZ1bmN0aW9uIGVkaXRNZXNzYWdlKG1lc3NhZ2UpIHsKICAgICAgdmFyIG0gPSB0aGlzLm1lc3NhZ2VMaXN0LmZpbmQoZnVuY3Rpb24gKG0pIHsKICAgICAgICByZXR1cm4gbS5pZCA9PT0gbWVzc2FnZS5pZDsKICAgICAgfSk7CiAgICAgIG0uaXNFZGl0ZWQgPSB0cnVlOwogICAgICBtLmRhdGEudGV4dCA9IG1lc3NhZ2UuZGF0YS50ZXh0OwogICAgfQogIH0sCiAgbW91bnRlZDogZnVuY3Rpb24gbW91bnRlZCgpIHsKICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgdGhpcy4kb3B0aW9ucy5zb2NrZXRzLm9ubWVzc2FnZSA9IGZ1bmN0aW9uIChldmVudCkgewogICAgICBjb25zb2xlLmxvZyhldmVudCk7CiAgICAgIHZhciBkYXRhID0gSlNPTi5wYXJzZShldmVudC5kYXRhKTsKICAgICAgdmFyIGxpbmUgPSBkYXRhWzFdLnRleHQ7IC8vICAgIGxldCBzZXJ2ZGF0YSA9ICBkYXRhLmRhdGFbMV07IAogICAgICAvLyAgICBjb25zb2xlLmxvZyhzZXJ2ZGF0YSkKCiAgICAgIGNvbnNvbGUubG9nKGxpbmUpOwoKICAgICAgaWYgKGRhdGFbMV0uZGlyZWN0aW9uID09ICJyZXBseSIpIHsKICAgICAgICBfdGhpcy5tZXNzYWdlTGlzdCA9IFtdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoX3RoaXMubWVzc2FnZUxpc3QpLCBbewogICAgICAgICAgdHlwZTogJ3RleHQnLAogICAgICAgICAgYXV0aG9yOiAidXNlcjEiLAogICAgICAgICAgZGF0YTogewogICAgICAgICAgICB0ZXh0OiBsaW5lCiAgICAgICAgICB9CiAgICAgICAgfV0pOwogICAgICB9CiAgICB9OyAvLyB7IHR5cGU6ICd0ZXh0JywgYXV0aG9yOiBgdXNlcjFgLCBkYXRhOiB7IHRleHQ6IGDQlNC+0LHRgNC+INC/0L7QttCw0LvQvtCy0LDRgtGMLiDQp9C10Lwg0LzRiyDQvNC+0LbQtdC8INC/0L7QvNC+0YfRjD9gIH0gfQogICAgLy8gICAgdGhpcy4kb3B0aW9ucy5zb2NrZXRzLm9ubWVzc2FnZSA9IChkYXRhKSA9PiB0aGlzLm1lc3NhZ2VMaXN0LnB1c2goZGF0YSkKCiAgfQp9Ow=="},{"version":3,"sources":["Chat.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div>\n    <beautiful-chat\n      :participants=\"participants\"\n      :titleImageUrl=\"titleImageUrl\"\n      :onMessageWasSent=\"onMessageWasSent\"\n      :messageList=\"messageList\"\n      :newMessagesCount=\"newMessagesCount\"\n      :isOpen=\"isChatOpen\"\n      :close=\"closeChat\"\n      :open=\"openChat\"\n      :showEmoji=\"true\"\n      :showFile=\"true\"\n      :showEdition=\"true\"\n      :showDeletion=\"true\"\n      :deletionConfirmation=\"true\"\n      :showTypingIndicator=\"showTypingIndicator\"\n      :showLauncher=\"true\"\n      :showCloseButton=\"true\"\n      :colors=\"colors\"\n      :alwaysScrollToBottom=\"alwaysScrollToBottom\"\n      :disableUserListToggle=\"false\"\n      :messageStyling=\"messageStyling\"\n      @onType=\"handleOnType\"\n      @edit=\"editMessage\" />\n      \n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'Chat',\n  data() {\n    return {\n      participants: [\n        {\n          id: 'user1',\n          name: 'Matteo',\n          imageUrl: 'https://avatars3.githubusercontent.com/u/1915989?s=230&v=4'\n        },\n        {\n          id: 'user2',\n          name: 'Support',\n          imageUrl: 'https://avatars3.githubusercontent.com/u/37018832?s=200&v=4'\n        }\n      ], // the list of all the participant of the conversation. `name` is the user name, `id` is used to establish the author of a message, `imageUrl` is supposed to be the user avatar.\n      titleImageUrl: 'https://a.slack-edge.com/66f9/img/avatars-teams/ava_0001-34.png',\n      messageList: [\n          { type: 'text', author: `user1`, data: { text: `Добро пожаловать. Чем мы можем помочь?` } }\n      ], // the list of the messages to show, can be paginated and adjusted dynamically\n      newMessagesCount: 0,\n      isChatOpen: false, // to determine whether the chat window should be open or closed\n      showTypingIndicator: '', // when set to a value matching the participant.id it shows the typing indicator for the specific user\n      colors: {\n        header: {\n          bg: '#4e8cff',\n          text: '#ffffff'\n        },\n        launcher: {\n          bg: '#4e8cff'\n        },\n        messageList: {\n          bg: '#ffffff'\n        },\n        sentMessage: {\n          bg: '#4e8cff',\n          text: '#ffffff'\n        },\n        receivedMessage: {\n          bg: '#eaeaea',\n          text: '#222222'\n        },\n        userInput: {\n          bg: '#f4f7f9',\n          text: '#565867'\n        }\n      }, // specifies the color scheme for the component\n      alwaysScrollToBottom: false, // when set to true always scrolls the chat to the bottom when new events are in (new message, user starts typing...)\n      messageStyling: true // enables *bold* /emph/ _underline_ and such (more info at github.com/mattezza/msgdown)\n    }\n  },\n  methods: {\n    sendMessage (text) {\n\n      if (text.length > 0) {\n        this.newMessagesCount = this.isChatOpen ? this.newMessagesCount : this.newMessagesCount + 1\n        \n        this.onMessageWasSent({ author: 'support', type: 'text', data: { text } })\n      }\n              // $socket is [WebSocket](https://developer.mozilla.org/en-US/docs/Web/API/WebSocket) instance\n        // or with {format: 'json'} enabled\n\n        //this.$socket.sendObj(json)\n    },\n    onMessageWasSent (message) {\n      // called when the user sends a message\n      let json = ['feedback_messages', {\n          text: message.data.text,\n          person: 'web-Клиент'\n      }]\n      this.$socket.send(JSON.stringify(json))\n      this.messageList = [ ...this.messageList, message ]\n    },\n    openChat () {\n      // called when the user clicks on the fab button to open the chat\n      this.isChatOpen = true\n      this.newMessagesCount = 0\n    },\n    closeChat () {\n      // called when the user clicks on the botton to close the chat\n      this.isChatOpen = false\n    },\n    handleScrollToTop () {\n      // called when the user scrolls message list to top\n      // leverage pagination for loading another page of messages\n    },\n    handleOnType () {\n      console.log('Emit typing event')\n    },\n    editMessage(message){\n      const m = this.messageList.find(m=>m.id === message.id);\n      m.isEdited = true;\n      m.data.text = message.data.text;\n    }\n  },\n  mounted: function () {\n    this.$options.sockets.onmessage = (event) =>  { \n           console.log(event)\n      const data = JSON.parse(event.data)\n      const line = data[1].text;\n//    let servdata =  data.data[1]; \n//    console.log(servdata)\n      console.log(line)\n      if (data[1].direction == \"reply\"){\n        this.messageList = [ ...this.messageList,  { type: 'text', author: `user1`, data: { text :line }} ] }\n\n      }\n    // { type: 'text', author: `user1`, data: { text: `Добро пожаловать. Чем мы можем помочь?` } }\n    //    this.$options.sockets.onmessage = (data) => this.messageList.push(data)\n  }\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\nh3 {\n  margin: 40px 0 0;\n}\nul {\n  list-style-type: none;\n  padding: 0;\n}\nli {\n  display: inline-block;\n  margin: 0 10px;\n}\na {\n  color: #42b983;\n}\n</style>\n\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n</style>\n\n"],"sourceRoot":"src/components"}]}